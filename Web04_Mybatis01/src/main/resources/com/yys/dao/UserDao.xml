<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--mapper根标签:一个映射配置文件,对应一个dao接口-->
<!--namespace对应的就是dao接口的全路径名-->
<mapper namespace="com.yys.dao.UserDao">
    <!--
        子标签:对应的就是dao接口中的每一个方法:
        select:对应的就是查询方法
        id:对应的方法名
        resultType:就是封装的结果的类型,如果封装结果的类型是List就对应其泛型的类型
        标签内容:就是要执行的sql语句
    -->
    <select id="findAll" resultType="user">
        select * from t_user;
    </select>
    <!--
        	<!-我们可以发现， 这个 sql 语句中使用#{}字符， #{}代表占位符，我们可以理解是原来 jdbc 部分所学的?，
        	它们都是代表占位符， 具体的值是由 User 类的 username 属性来决定的。parameterType 属性：代表参数的类型，
        	因为我们要传入的是一个类的对象，所以类型就写类的全名称。

        resultType只有select标签才有

        我们需要在标签体的SQL语句中，获取pojo类型的参数的属性: #{属性名}


        selectKey标签: 查询主键
            keyColumn 表示要查询的列名
            keyProperty 表示要赋值的属性名
            resultType 表示查询出来的结果的类型
            order 表示在前或者在后执行
        select last_insert_id() 查询最后一个自增长的id的值
      -->
    <insert id="addUser" parameterType="user">
        <selectKey resultType="int" keyColumn="uid" order="AFTER" keyProperty="uid">
            select last_insert_id()
        </selectKey>
        insert into t_user(username,sex,birthday,address)values(#{username},#{sex},#{birthday},#{address})
    </insert>

    <select id="searchById" parameterType="Integer" resultType="user">
        select * from t_user where uid=#{uid}
    </select>

    <update id="updateUser" >
        update t_user set username=#{username},sex=#{sex},birthday=#{birthday},address=#{address} where uid = #{uid}
    </update>

    <delete id="deleteByid" parameterType="Integer">
        delete from t_user where uid=#{uid}
    </delete>

    <!--
            模糊查询
                另外一种在SQL语句中引用方法的参数的方式：${}
                1. 引用pojo中的属性: '${属性名}'
                2. 引用简单类型的参数: '${value}'，但是高版本的mybatis中可以'${任意字符串}'
                注意:统一放属性名
    -->
    <select id="searchByUsername" parameterType="String" resultType="user">

         select * from t_user where username like '%${username}%'

    </select>
</mapper>